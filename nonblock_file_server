#!/usr/bin/env python
# -*- coding=utf-8 -*-


"""
file: recv.py
socket service
"""


import socket
import threading
import time
import sys
import os
import struct


def socket_service():
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) ##定义socket类型，网络通信，TCP
                                                              ##socket.SOCK_STREAM，流式socket , for TCP

        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)##setsockopt(level,optname,value)，
                                                               ##level定义了哪个选项将被使用。通常情况下是SOL_SOCKET，意思是正在使用的socket选项。
                                                               ##optname参数提供使用的特殊选项，当socket关闭后，本地端用于该socket的端口号立刻就可以被重用。

        s.bind(('127.0.0.1', 6666)) #套接字绑定的IP与端口
        s.listen(10) ####监听TCP，10代表：操作系统可以挂起(未处理请求时等待状态)的最大连接数量。该值至少为1
    except socket.error as msg:
        print msg
        sys.exit(1)
    print 'Waiting connection...'

    while 1:
        conn, addr = s.accept() ## 开始被动接受TCP客户端的连接。并返回新的套接字与IP地址
        t = threading.Thread(target=deal_data, args=(conn, addr))##将要执行的方法作为参数传给Thread的构造方法，使用线程。
                                                                 ##target=deal_data ，deal_data为需要线程去执行的方法名
                                                                 ##线程执行方法接收的参数，该属性是一个元组。
        t.start()

def deal_data(conn, addr):
    print 'Accept new connection from {0}'.format(addr)
    #conn.settimeout(500) ##设置套接字操作的超时期，timeout是一个浮点数，单位是秒。值为None表示没有超时期。
    conn.send('Hi, Welcome to the server!')

    while 1:
           # 定义定义文件信息。128s表示文件名为128bytes长，l表示一个int或log文件类型，在此为文件大小
        fileinfo_size = struct.calcsize('128sl')###struct.calcsize用于计算格式字符串所对应的结果的长度
        buf = conn.recv(fileinfo_size) ##接受TCP套接字的数据。数据以字符串形式返回，fileinfo_size为指定要接收的最大数据量为文件大小。
        if buf:
            filename, filesize = struct.unpack('128sl', buf)##根据字符串128sl，struct.unpack做的工作刚好与struct.pack相反，用于将字节流转换成python数据类型。它的函数原型为：struct.unpack(fmt, string)。 
            fn = filename.strip('\00') # 去除首尾字符 \00 
            new_filename = os.path.join('./', 'new_' + fn) ##将多个路径组合后返回，第一个绝对路径之前的参数将被忽略。
            print 'file new name is {0}, filesize if {1}'.format(new_filename,
                                                                 filesize)

            recvd_size = 0  # 定义已接收文件的大小
            fp = open(new_filename, 'wb')#只写打开或新建一个二进制文件；只允许写数据
            print 'start receiving...'

            while not recvd_size == filesize:
                if filesize - recvd_size > 1024:
                    data = conn.recv(1024)
                    recvd_size += len(data)
                else:
                    data = conn.recv(filesize - recvd_size)
                    recvd_size = filesize
                fp.write(data) #将data写进文件
            fp.close()
            print 'end receive...'
        conn.close()
        break


if __name__ == '__main__':
    socket_service()
